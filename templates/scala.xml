<templateSet group="scala">
  <template name="unapply" value="def unapply(arg: $ARG_TYPE$): Option[$RET_TYPE$] = $BODY$$END$" description="Template for unapply" toReformat="true" toShortenFQNames="true">
    <variable name="ARG_TYPE" expression="scala_className" defaultValue="X" alwaysStopAt="false" />
    <variable name="RET_TYPE" expression="scala_primaryConstructorParamTypes" defaultValue="Int" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="&quot;???&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="apply" value="def apply($ARGS$): $RET_TYPE$ = new $RET_TYPE$($ARGS_NO_TYPES$)" description="Template for apply" toReformat="true" toShortenFQNames="true">
    <variable name="ARGS" expression="scala_primaryConstructorParams" defaultValue="x" alwaysStopAt="true" />
    <variable name="RET_TYPE" expression="scala_className" defaultValue="" alwaysStopAt="false" />
    <variable name="ARGS_NO_TYPES" expression="scala_primaryConstructorParamNames(ARGS)" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="imvc" value="implicit class $CLASS_NAME$$SUFFIX$(private val $RECEIVER_NAME$: $TYPE_NAME$) extends AnyVal {&#10;$END$&#10;}" description="Template for extension methods container" toReformat="true" toShortenFQNames="true">
    <variable name="TYPE_NAME" expression="" defaultValue="&quot;Any&quot;" alwaysStopAt="true" />
    <variable name="RECEIVER_NAME" expression="scala_suggestVariableNameByTypeText(TYPE_NAME)" defaultValue="&quot;target&quot;" alwaysStopAt="true" />
    <variable name="CLASS_NAME" expression="scala_implicitValueClassName(TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
  </template>
</templateSet>